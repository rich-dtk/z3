(declare-datatypes (T) ((Lst nil (cons (hd T) (tl Lst)))))
(declare-const list1 (Lst (Seq Int)))
(declare-const list2 (Lst (Seq Int)))
(declare-const seq1 (Seq Int))
(assert (= 1 (seq.len seq1)))
(assert  (not (= list1 list2)))
(assert (= list1 (cons seq1 nil)))  
(check-sat)
(get-model)

(reset)
(declare-datatypes () ((Tree leaf (node0 (s String)) (node1 (stringvar String) (value Int) (children TreeList))) 
                       (TreeList nil (cons (car Tree) (cdr TreeList)))
                      ))
(declare-const t1 Tree)
(declare-const t2 Tree)
(declare-const t3 TreeList)
(assert (= t1 (node0 "this is test")))
(assert (= t2 (node1 "this is 2nd test" 2 t3)))

(assert (not (= t3 (as nil TreeList))))
(assert (not (is-node0 t2)))
(assert (> (value t1) 20))
(assert (not (is-leaf t2)))
(assert (= 2 (value t2)))
(assert (not (=  t1 t2)))
(check-sat)
(get-model)

(reset)

(declare-datatypes () ((DTKVal nil (string (string String)) (int (int Int)) (bool (bool Bool)) (hash (hash DTKHash)) (array (array DTKArray)))
                       (DTKHashPair (pair (key String) (val DTKVal)))
                       (DTKHash  (seq (seqfoo DTKHashPair)))
                       (DTKArray (seq (seqfoo DTKVal)))
                       (DTKFoo (mk-pair (first DTKVal) (second Int)))
                       ))

(declare-const v1 DTKVal)
(declare-const v2 DTKVal)
(declare-const h1 DTKHash)
(declare-const h2 DTKHash)
(declare-const array1 DTKArray)
(declare-const seq1 (Seq DTKVal))
(declare-const foo DTKFoo)
(assert (= array1 (array v1)))
(assert (= v1 (first foo)))

(assert (not (= h1 h2)))
(assert (is-array v1))
(assert (is-array v2))

(check-sat)
(get-model)

(reset)
(declare-datatypes () ((DTKBaseVal nil (string (string String)) (int (int Int)) (bool (bool Bool)))))
(declare-datatypes (T) ((DTKVal nil (array (array T)))))
(declare-const v1 (DTKVal (Array Int DTKBaseVal)))
(declare-const v2 (DTKVal (Array Int DTKBaseVal)))
(assert (not (= v1 v2)))

(check-sat)
(get-model)


